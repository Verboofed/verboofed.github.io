import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';
import { PrivateConfig, SpotifyConfig } from '../../interfaces/Config';
export declare class HttpClient {
    protected config: SpotifyConfig;
    protected privateConfig: PrivateConfig;
    protected baseURL: string;
    protected tokenURL: string;
    protected client: AxiosInstance;
    constructor(config: SpotifyConfig, privateConfig: PrivateConfig);
    /**
     * @param {string} slug
     * @param {string} query
     * @returns {string} Returns the full url.
     */
    getURL(slug: string, query?: Record<string, string>): string;
    /**
     * @description Get a refresh token.
     * @returns {string} Returns the refresh token.
     */
    private refreshToken;
    /**
     * Get authorization token with client credentials flow.
     */
    private getToken;
    /**
     * @description Handles the auth tokens.
     * @returns {string} Returns a auth token.
     */
    private handleAuth;
    /**
     * Sleep function.
     * @param {number} delay Delay in milliseconds.
     */
    private sleep;
    private create;
    /**
     * @param {string} slug The slug to get.
     * @param {{query?: Record<string, string> & AxiosRequestConfig}} options Options.
     * @returns {Promise<AxiosResponse>} Returns a promise with the response.
     */
    get(slug: string, options?: {
        query?: Record<string, string>;
    } & AxiosRequestConfig): Promise<AxiosResponse>;
    /**
     * @param {string} slug The slug to post.
     * @param {any} data Body data.
     * @param {{Record<string, string> & RequestInit}} config Config.
     * @returns {Promise<Response>} Returns a promise with the response.
     */
    post(slug: string, data: any, config?: {
        query?: Record<string, string>;
    } & AxiosRequestConfig): Promise<AxiosResponse>;
    /**
     * @param {string} slug The slug to put.
     * @param {any} data Body data.
     * @param {{Record<string, string> & RequestInit}} config Config.
     * @returns {Promise<Response>} Returns a promise with the response.
     */
    put(slug: string, data: any, config?: {
        query?: Record<string, string>;
    } & AxiosRequestConfig): Promise<AxiosResponse>;
    /**
     * @param {string} slug The slug to delete.
     * @param {any} data Body data.
     * @param {{Record<string, string> & RequestInit}} options Options.
     * @returns {Promise<Response>} Returns a promise with the response.
     */
    delete(slug: string, data: any, options?: {
        query?: Record<string, string>;
    } & AxiosRequestConfig): Promise<AxiosResponse>;
}
